import boto3
import json
import os
import botocore.config
from dotenv import load_dotenv
from langchain.text_splitter import CharacterTextSplitter, RecursiveCharacterTextSplitter
import tiktoken
#from pypdf import PdfReader
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter

# loading environment variables
load_dotenv()
# configure Bedrock client
boto3.setup_default_session(profile_name=os.getenv("profile_name"))
config = botocore.config.Config(connect_timeout=120, read_timeout=120)
bedrock = boto3.client('bedrock-runtime', 'us-west-2', endpoint_url='https://bedrock-runtime.us-west-2.amazonaws.com',
                       config=config)


def summarizer(prompt_data) -> str:
    """
    This function creates the summary of each individual chunk as well as the final summary.
    :param prompt_data: This is the prompt along with the respective chunk of text, at the end it contains all summary chunks combined.
    :return: A summary of the respective chunk of data passed in or the final summary that is a summary of all summary chunks.
    """
    # setting the key parameters to invoke Amazon Bedrock
    body = json.dumps({"prompt": prompt_data,
                       "max_tokens_to_sample": 8191,
                       "temperature": 0,
                       "top_k": 250,
                       "top_p": 0.5,
                       "stop_sequences": []
                       })
    # the specific Amazon Bedrock model you are using
    modelId = 'anthropic.claude-3-5-sonnet-20240620-v1:0', #ModelId='anthropic.claude-3-5-sonnet-20240620-v1:0',`
    # type of data that should be expected upon invocation
    accept = 'application/json'
    contentType = 'application/json'
    # the invocation of bedrock, with all of the parameters you have configured
    response = bedrock.invoke_model(body=body,
                                    modelId=modelId,
                                    accept=accept,
                                    contentType=contentType)
    # gathering the response from bedrock, and parsing to get specifically the answer
    response_body = json.loads(response.get('body').read())
    answer = response_body.get('completion')
    # returning the final summary for that chunk of text
    return answer


def num_tokens_from_string(string) -> int:
    """Returns the number of tokens in a text string."""
    encoding = tiktoken.get_encoding("cl100k_base")
    num_tokens = len(encoding.encode(string))
    return num_tokens


def Chunk_and_Summarize(uploaded_file) -> str:

    """
    This function processes a PDF file to extract text and send it to Bedrock for further processing.
    :param uploaded_file: The path to the PDF file uploaded by the user.
    :return: A summary in iCalendar format based on the extracted information from the PDF.
    """
    # Using PyPDF PdfReader to read in the PDF file as text
    reader = PdfReader(uploaded_file)
    text = ""

    # Extracting text from all pages of the PDF
    for page in reader.pages:
        text += page.extract_text() + "\n"

    # Splitting text to handle large inputs
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=100,
        length_function=len,
        add_start_index=True
    )
    texts = text_splitter.create_documents([text])

    # Creating an empty summary string
    final_summary = ""

    # Process each chunk
    for chunk in texts:
        chunk_content = chunk.page_content
        prompt = f"""
        Process the following:

        1. Extract all dates, events, and timings.
        2. Convert the extracted information into iCalendar format.
        3. Set a reminder for each event 48 hours in advance.
        4. Output the final iCalendar data in a text format that I can save as a .ics file.

        Here is the text from the chunk:
        {chunk_content}
        """
        
        # Send the prompt to Bedrock and get the response
        response = summarizer(prompt)
        final_summary += response + "\n"  # Append each response with a newline

    return summarizer(final_summary)